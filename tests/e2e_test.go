package bus_travel_test

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"reflect"
	"testing"
	"time"

	"github.com/lleonesouza/bus-travel/modules/dtos"
)

const url = "http://localhost:1324"

func TestEndToEnd(t *testing.T) {
	// Prepare the request body
	createInput := dtos.BusTravelCreateInput{
		Origin:            "São Paulo",
		Destination:       "Rio de Janeiro",
		DepartureTime:     time.Date(2022, 1, 1, 10, 0, 0, 0, time.UTC),
		ArrivalTime:       time.Date(2022, 1, 1, 15, 0, 0, 0, time.UTC),
		Price:             50.0,
		HasWiFi:           true,
		HasBathroom:       true,
		HasAirConditioner: true,
	}
	jsonBody, err := json.Marshal(createInput)
	if err != nil {
		t.Fatalf("Failed to marshal JSON: %v", err)
	}
	// Make the request
	resp, err := http.Post(fmt.Sprintf("%s/bus-travels", url), "application/json", bytes.NewReader(jsonBody))
	if err != nil {
		t.Fatalf("Failed to make request: %v", err)
	}

	// Check the response status code
	if resp.StatusCode != http.StatusCreated {
		t.Errorf("Unexpected status code: %d", resp.StatusCode)
	}

	// Parse the response body
	var busTravel dtos.BusTravel
	err = json.NewDecoder(resp.Body).Decode(&busTravel)
	if err != nil {
		t.Fatalf("Failed to decode JSON: %v", err)
	}

	// Assert that the response matches the expected output
	expectedBusTravel := dtos.BusTravel{
		ID:                busTravel.ID, // The actual ID will be generated by the server
		Origin:            "São Paulo",
		Destination:       "Rio de Janeiro",
		DepartureTime:     time.Date(2022, 1, 1, 10, 0, 0, 0, time.UTC),
		ArrivalTime:       time.Date(2022, 1, 1, 15, 0, 0, 0, time.UTC),
		Price:             50.0,
		HasWiFi:           true,
		HasBathroom:       true,
		HasAirConditioner: true,
	}
	if !reflect.DeepEqual(busTravel, expectedBusTravel) {
		t.Errorf("Unexpected response body: %v", busTravel)
	}
	client := http.Client{}
	// Update the bus travel record
	newName := "Florianópolis"
	newDepartureTime := busTravel.DepartureTime.Add(time.Hour * 24)
	newArrivalTime := busTravel.ArrivalTime.Add(time.Hour * 2)
	newPrice := 75.00
	newHasWifi := false
	newHasBathroom := true
	newHasAirConditioner := true

	updateInput := dtos.BusTravelUpdateInput{
		Destination:       &newName,
		DepartureTime:     &newDepartureTime,
		ArrivalTime:       &newArrivalTime,
		Price:             &newPrice,
		HasWiFi:           &newHasWifi,
		HasBathroom:       &newHasBathroom,
		HasAirConditioner: &newHasAirConditioner,
	}

	updateInputBytes, err := json.Marshal(updateInput)
	if err != nil {
		t.Fatalf("Failed to marshal update input: %s", err)
	}
	updateReq, err := http.NewRequest(http.MethodPut, fmt.Sprintf("%s/bus-travels/%d", url, busTravel.ID), bytes.NewBuffer(updateInputBytes))
	if err != nil {
		t.Fatalf("Failed to create update request: %s", err)
	}
	updateReq.Header.Set("Content-Type", "application/json")
	updateResp, err := client.Do(updateReq)
	if err != nil {
		t.Fatalf("Failed to execute update request: %s", err)
	}
	defer updateResp.Body.Close()
	if updateResp.StatusCode != http.StatusOK {
		t.Fatalf("Expected status code %d but got %d", http.StatusOK, updateResp.StatusCode)
	}

	// Send delete request
	deleteReq, err := http.NewRequest(http.MethodDelete, fmt.Sprintf("%s/bus-travels/%d", url, busTravel.ID), nil)
	if err != nil {
		t.Fatalf("Failed to create request: %v", err)
	}
	deleteReq.Header.Set("Content-Type", "application/json")
	deleteResp, err := client.Do(deleteReq)
	if err != nil {
		t.Fatalf("Failed to send request: %v", err)
	}
	defer deleteResp.Body.Close()
	if deleteResp.StatusCode != http.StatusNoContent {
		t.Fatalf("Unexpected status code: want=%d, got=%d", http.StatusNoContent, deleteResp.StatusCode)
	}

	// Make another request to get the BusTravel by ID and verify that it's been deleted
	getReq, err := http.NewRequest(http.MethodGet, fmt.Sprintf("/bus-travels/%d", busTravel.ID), nil)
	if err != nil {
		t.Fatal(err)
	}
	getReq.Header.Set("Content-Type", "application/json")
	getResp, err := client.Do(deleteReq)
	if err != nil {
		t.Fatalf("Failed to send request: %v", err)
	}
	defer getResp.Body.Close()
	if getResp.StatusCode != http.StatusNotFound {
		t.Fatalf("Unexpected status code: want=%d, got=%d", http.StatusNotFound, getResp.StatusCode)
	}
}
